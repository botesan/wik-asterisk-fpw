#                                                         -*- Perl -*-
# Copyright (c) 2007-2009  Kazuhiro Ito
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
require v5.6;
use utf8;
use strict;
use warnings;

use Getopt::Long;
use English;
use FileHandle;
use FreePWING::FPWUtils::FPWParser;
use Encode qw/ from_to decode_utf8 encode_utf8 encode decode/;

use vars qw(%fpwwikipedia_conf);
require "wikipedia-fpw.conf";

use vars qw (%entity_table);
use vars qw (%utf2euc_table);
use vars qw ($utf2euc_regexp);
require "tables";

use vars qw($entry_headings $hash_module);

require "fpwwikipedia_common";

 MAIN: {
  my $time = time;
  my $page_count = 0;
  my $entry_count = 0;

  my ($fpwtext, $fpwheading, $fpwword2, $fpwcopyright);
  initialize_fpwparser('text' => \$fpwtext,
                      'heading' => \$fpwheading,
                      'word2' => \$fpwword2,
                      'copyright' => \$fpwcopyright);

  if (!GetOptions('hash_module=s' => \$hash_module)) {
    exit 1;
  }

  get_entry_headings('entries');

  my $copyright_filename;
  if ( $#ARGV < 1) {
    die("$PROGRAM_NAME: Only a file ($ARGV[0]) is specified.");
  }
  $copyright_filename = $ARGV[$#ARGV];
  register_copyright(\$fpwcopyright, $copyright_filename);

  read_gaiji_chars();

  my $wikipedia_filename = $ARGV[0];

  if (not -e $wikipedia_filename) {
    die("$PROGRAM_NAME: '$wikipedia_filename' does not exist.");
  }

  my $xml = FileHandle->new();
  if (!$xml->open("$wikipedia_filename", 'r')) {
    die "$PROGRAM_NAME: Failed to open the file, $ERRNO: $wikipedia_filename\n";
  }

  my ($text, $heading);
  my ($text_position, $heading_position);

  if(verbose_mode ()) {
    print "Skipping headers: $fpwwikipedia_conf{'skip_heading'}\n";
    print "Skipping contents: $fpwwikipedia_conf{'skip_content'}\n";
    print "Selecting headers: $fpwwikipedia_conf{'select_heading'}\n";
    print "Selecting contents: $fpwwikipedia_conf{'select_content'}\n";
  }

  PARSER: for (;;) {
    $_ = '';
    while (!(/<page>/)) {
      $_ = $xml->getline();
      if (!defined($_)) {
        last PARSER;
      }
    }

    $text = decode_utf8($_);
    
    while (!(/<\/page>/)) {
      $_ = $xml->getline();
      if (!defined($_)) {
        die "$PROGRAM_NAME: Unexpected file end\n";
      }
      $text .= decode_utf8($_);
    }

    $text =~ /<title>([^<]+)<\/title>/;
    $heading = $1;

    # Skipping entries (for debug)
    $page_count++;
    if ($page_count <= $fpwwikipedia_conf{'skip_count'}) {
      next;
    }

    if (!defined($entry_headings->get($heading))) {
      if (verbose_mode()) {
        print "Skipping page: $heading.\n";
      }
      next;
    }

    # Workarounds
#     if ($heading =~ /^Ruby$/) {
#       $text =~ s/\{\|([^\|]*\|[^\}]+\})/<nowiki>{|<\/nowiki>$1/g;
#     # Fixed at 2007/10/01
#     } elsif ($heading =~ /^ネイチャーライティング$/) {
#       $text =~ s/\|-\}/\|-\|\}/g;
#     } elsif ($heading =~ /^大原めぐみ$/) {
#       $text =~ s/ドラえもん\[\[Wii\]\]/ドラえもんWii/;
#     } elsif ($heading =~ /^岩田正太$/) {
#       $text =~ s/JaSRAサッカークラ\*2007年- \[\[ザスパ草津\]\]\nブ\]\]/JaSRAサッカークラブ]]\n/;
#     # Fixed at 2007/08/22
#     } elsif ($heading =~ /^予算$/) {
#       $text =~ s/\[\[s:地方自治法 第二編 第九章 財務#211\|地方自治法第211条）/[[s:地方自治法 第二編 第九章 財務#211|地方自治法第211条]]）/;
#     # Fixed at 2007/08/21
#     } elsif ($heading =~ /^加茂田重政$/) {
#       $text =~ s/\[\[加茂田組\|加茂田会\}\}/[[加茂田組|加茂田会]]/;
#     } elsif ($heading =~ /^石川県の廃止市町村一覧$/) {
#       $text =~ s/\[\[三谷村 \(石川県河北郡\)\|新設の為/[[三谷村 (石川県河北郡)|三谷村]]新設の為/;
#     } elsif ($heading =~ /^ドメインハック$/) {
#       $text =~ s/\[\[バーナー\|ウェブバーナー\]の/[[ウェブバーナー|バーナー]]の/;
#     } elsif ($heading =~ /^チャールストン \(サウスカロライナ州\)$/) {
#       $text =~ s/\[\[:en:University of Illinois Press\|U. of Illinois Press, /[[:en:University of Illinois Press|U. of Illinois Press]], /;
#       $text =~ s/\[\[:en:University Press of Mississippi\|U. Press of Mississippi, /[[:en:University Press of Mississippi|U. Press of Mississippi]], /;
#     # Fixed at 2007/07/09
#     } elsif ($heading =~ /^単位一覧$/) {
#       $text =~ s/(<sup>229376<\/sup>\n\|)-/$1\}/g;
#     }


    print encode_utf8("Entry: $page_count; $heading\n");
    $heading_position = register_heading(\$fpwheading, $heading);
    $text_position = register_content(\$fpwtext, $heading, $text);
    my @headings = expand_search_entry($heading, $text);
    register_search_entry(\$fpwword2, \@headings, $heading_position, $text_position);

    # Check number of entries (for debug)
    $entry_count++;
    if ($fpwwikipedia_conf{'entry_count'} > 0
        && $entry_count >= $fpwwikipedia_conf{'entry_count'}) {
      last;
    }
  }

  $entry_headings->close();
  $xml->close();

  make_gaiji_map();

  finalize_fpwparser('text' => \$fpwtext,
                     'heading' => \$fpwheading,
                     'word2' => \$fpwword2,
                     'copyright' => \$fpwcopyright);
  
  printf(encode_utf8("$PROGRAM_NAME: Elapsed time     : %8dsec.\n"), time - $time);
  printf(encode_utf8("$PROGRAM_NAME: Number of entries: %8d\n"), $entry_count);
}


sub register_copyright {
  my ($fpwcopyright, $filename) = @_;
  my $handle = FileHandle->new();

  if (!$handle->open($filename, 'r')) {
    die "$PROGRAM_NAME: failed to open the file, $filename\n";
  }

  if(verbose_mode ()) {
    print "Copyright notice: $filename.\n";
  }

  $_ = $handle->getline();
  for (; defined($_); $_ = $handle->getline()) {
    ($$fpwcopyright->add_text($_)
     && $$fpwcopyright->add_newline())
        ||  die "$PROGRAM_NAME: " . $$fpwcopyright->error_message() . "\n";
  }

  $handle->close();
}

sub register_heading {
  my ($fpwheading, $heading) = @_;
  
  $$fpwheading->new_entry()
      || die "$PROGRAM_NAME: " . $$fpwheading->error_message() . "\n";
  add_text_with_gaiji($fpwheading, decode_entity($heading))
      || die "$PROGRAM_NAME: " . $$fpwheading->error_message() . "\n";
  return $$fpwheading->entry_position();
}

sub trim_key {
  my $str = $_[0];
  $str =~ s/(^([\x80-\xff][\x80-\xff]|[\x20-\x7f]){1,127}).*$/$1/o;
  return $str;
}

sub register_search_entry {
  my ($fpwword2, $keys, $heading, $text) = @_;
  my $key;

  if (verbose_mode()) {
    print "Entry key: ";
  }

  foreach $key (@$keys) {
    if ($key =~ /^(\xA1\xA1| |\xA1\xC7|\'|\xA1\xDD|-|\xA1\xA6|\xA1\xBE)+$/) {
      next;
    }

    if ($fpwwikipedia_conf{'trim_long_index'}) {
      $key = trim_key($key);
    }

    if(verbose_mode()) {
      my $tmp = $key;
      from_to($tmp, 'euc-jp', 'utf-8');
      print "$tmp ";
    }

    $$fpwword2->add_entry($key, $heading, $text)
        || die "$PROGRAM_NAME: " . $$fpwword2->error_message() . "\n";
  }

  if(verbose_mode()) {
    print "\n";
  }
}

sub register_content {
  my ($fpwtext, $heading, $content) = @_;
  my $formatted_content;

  ($$fpwtext->new_entry()
   && $$fpwtext->add_entry_tag(unpack('H*', encode_utf8($heading)))
   && $$fpwtext->add_keyword_start()
   && add_text_with_gaiji($fpwtext, decode_entity($heading))
   && $$fpwtext->add_keyword_end()
   && $$fpwtext->add_newline()
   && $$fpwtext->add_indent_level(2))
      || die "$PROGRAM_NAME: " . $$fpwtext->error_message() . "\n";

  # $formatted_content = decode_entity(format_content($heading, $content));
  $formatted_content = format_content($heading, $content);

  # print "$formatted_content\n";
  
  my ($text, @texts);

  @texts = split(/(<\/?[^<>]+>)/, $formatted_content);
  
  my $indent_level = 2;
  my $indent_last  = 2;
  my $last_ref = '';
  my $tmp;
  my %reference_hash = ();

  my $tag_level = 0;
  my $sub_level = 0;
  my $sup_level = 0;
  my @tags = ();
  my $written_level = 0;
  my $ref_level = 0;
  my $text_count = 0;
  my @num_items = (0, 0, 0, 0, 0, 0, 0);

  foreach $text (@texts) {

    if (!length($text)) {
      next;
    }
##### M.ITO ( DEBUG #####
  # if ($heading =~ /^ダイヤモンド$/) {
  #   print "foreach indent_level=" . $indent_level . ":" . $text . "\n";
  # }
##### M.ITO ) DEBUG #####
    $text_count++;
    if  ($text eq '<IND>') {
      if ($indent_level < 6) {
        $indent_level++;
      }
    } elsif ($text =~ /^<(BR|\/?(H|DT|DD))>/) {
      # In reference, don't output newline.
      if ($ref_level) {
        next;
      }

      # Write closing tags.
      for (; $written_level >= 1; $written_level--) {
         if ($written_level == $sup_level) {
          $$fpwtext->add_superscript_end()
              || register_content_error ($fpwtext, $heading, $content, $formatted_content);
         } elsif ($written_level == $sub_level) {
          $$fpwtext->add_subscript_end()
              || register_content_error ($fpwtext, $heading, $content, $formatted_content);
         }
      }
      $sup_level = 0;
      $sub_level = 0;
      $tag_level = 0;

      if($text eq '</H>')  {
        $$fpwtext->add_emphasis_end()
            || register_content_error ($fpwtext, $heading, $content, $formatted_content);
      }
      if($text_count > 1) {
        $$fpwtext->add_newline()
            || register_content_error ($fpwtext, $heading, $content, $formatted_content);
      }
      $indent_level = 2;
      if($text eq '<H>')  {
        $$fpwtext->add_emphasis_start()
            || register_content_error ($fpwtext, $heading, $content, $formatted_content);
      }
    } elsif ($text =~ /^<R (.+)>$/) {
      if (defined($entry_headings->get($1))
          && ($fpwwikipedia_conf{'enable_reference'} == 1
              || !defined($reference_hash{$1}))) {
        $last_ref = $1;
        $reference_hash{$1} = 1;
        $tags[$tag_level] = 'R';
        $tag_level++;
        $ref_level = $tag_level;
      }
    } elsif ($text eq '</R>') {
      if (!length($last_ref)) {
        next;
      }

      #write inner closing tags.
      for (;$tag_level > $ref_level; $tag_level--) {
        if ($tag_level == $sup_level) {
          $sup_level = 0;
          if ($tag_level <= $written_level) {
            $$fpwtext->add_superscript_end()
                || register_content_error ($fpwtext, $heading, $content, $formatted_content);
          }
        } elsif ($tag_level == $sub_level) {
          $sub_level = 0;
          if ($tag_level <= $written_level) {
            $$fpwtext->add_subscript_end()
                || register_content_error ($fpwtext, $heading, $content, $formatted_content);
          }
        }
      }

      if ($tag_level <= $written_level) {
        $$fpwtext->add_reference_end(unpack("H*", encode_utf8($last_ref)))
            || register_content_error ($fpwtext, $heading, $content, $formatted_content);
      }

      $ref_level = 0;
      $last_ref = '';
      $tag_level--;
      $written_level = ($written_level > $tag_level) ? $tag_level : $written_level;
    } elsif ($text eq '<sup>') {
      $tags[$tag_level] = 'S';
      $tag_level++;
      $sup_level = ($sup_level == 0) ? $tag_level : $sup_level;
    } elsif ($text eq '<sub>') {
      $tags[$tag_level] = 'S';
      $tag_level++;
      $sub_level = ($sub_level == 0) ? $tag_level : $sub_level;
    } elsif ($text =~ /<\/su[bp]>/) {
      # MediaWiki allows closing <sub> tag with </sup> tag.
      if ($sub_level && $tag_level == $sub_level) {
        $tag_level--;
        $sub_level = 0;
        if ($tag_level < $written_level) {
          $$fpwtext->add_subscript_end()
              || register_content_error ($fpwtext, $heading, $content, $formatted_content);
          $written_level--;
        }
      } elsif ($sup_level && $tag_level == $sup_level) {
         $tag_level--;
         $sup_level = 0;
        if ($tag_level < $written_level) {
           $$fpwtext->add_superscript_end()
               || register_content_error ($fpwtext, $heading, $content, $formatted_content);
          $written_level--;
         }
      } elsif ($tag_level && $tags[$tag_level - 1] eq 'S') {
        $tag_level--;
        $written_level = ($written_level > $tag_level) ? $tag_level : $written_level;
      }
    } elsif ($text =~ /^\n+$/) {
    } else {
      if ($indent_level != $indent_last) {
        $indent_last = $indent_level;
        $$fpwtext->add_indent_level ($indent_last)
            || register_content_error ($fpwtext, $heading, $content, $formatted_content);
        splice(@num_items, $indent_last + 1);
        splice(@num_items, @num_items, 0, (0) x (6 - @num_items));
##### M.ITO ( DEBUG #####
        # if ($heading =~ /^mixture$/) {
        #   print "splice indent_last=$indent_last: \@num_items=(@num_items)\n";
        # }
##### M.ITO ) DEBUG #####
      }

      # Write opening tags.
      while ($written_level < $tag_level) {
        $written_level++;
        if ($written_level == $sup_level) {
          $$fpwtext->add_superscript_start()
              || register_content_error ($fpwtext, $heading, $content, $formatted_content);
        } elsif ($written_level == $sub_level) {
          $$fpwtext->add_subscript_start()
              || register_content_error ($fpwtext, $heading, $content, $formatted_content);
        } elsif ($written_level == $ref_level) {
          $$fpwtext->add_reference_start()
              || register_content_error ($fpwtext, $heading, $content, $formatted_content);
        }
      }

      if ($text eq '<N>') {
        $num_items[$indent_last]++;
##### M.ITO ( DEBUG #####
        # if ($heading =~ /^mixture$/) {
        #   print "add_text_with_gaiji indent_last=$indent_last: \@num_items=(@num_items)\n";
        # }
##### M.ITO ) DEBUG #####
        add_text_with_gaiji($fpwtext, $num_items[$indent_last].'.')
            || register_content_error ($fpwtext, $heading, $content, $formatted_content);
      } elsif ($text !~ /<math (.+)>/) {
##### M.ITO ( DEBUG #####
        # if ($text =~ /\{\@([^:\@\}]+)((:|\@)[^\@\}]+)?\@\}/) {
        #   print encode_utf8("found not replace template = " . $text . "\n");
        # }
##### M.ITO ) DEBUG #####
        add_text_with_gaiji($fpwtext, $text)
            || register_content_error ($fpwtext, $heading, $content, $formatted_content);
      } elsif ($fpwwikipedia_conf{'enable_math'}) {
        $$fpwtext->add_inline_color_graphic_start("math_$1")
            && $$fpwtext->add_inline_color_graphic_end()
            || register_content_error ($fpwtext, $heading, $content, $formatted_content);
      }
    }
  }

  # Write closing tags.
  for (; $written_level >= 1; $written_level--) {
    if ($written_level == $sup_level) {
      $$fpwtext->add_superscript_end()
          || register_content_error ($fpwtext, $heading, $content, $formatted_content);
      $sup_level = 0;
    } elsif ($written_level == $sub_level) {
      $$fpwtext->add_subscript_end()
          || register_content_error ($fpwtext, $heading, $content, $formatted_content);
      $sub_level = 0;
    }
  }
  $$fpwtext->add_newline()
      || register_content_error ($$fpwtext, $heading, $content, $content);
  
  return $$fpwtext->entry_position();
}

sub format_content {
  my ($heading, $text) =@_;
  my @texts;
  my $level;



  # Remove header and footer 
  $text =~ s/^.*?<text( [^>]+)?>\s*//s;
  $text =~ s/\s*<\/text>.*?$//s;

  # Decode entitiy
  $text = decode_entity($text);

  # Remove html comment
  if ($text =~ /<!--/) {
    @texts = split(/(<!--|-->)/, $text);
    $text ='';
    $level = 0;
    foreach $_ (@texts) {
      if ($_ =~ /<!--/) {
        $level = 1;
      } elsif ($_ =~ /-->/) {
        $level = 0;
      } elsif ($level == 0) {
        $text .= $_;
      }
    }
  }

  # Backup nowiki text
  my $tmp = '';
  my $tmp2;
  my @f_texts;
  my $f_texts_count = 0;
  while ($text =~ s/^(.*?)<(nowiki|source|pre)(?: [^>]*)?>(.*?)<\/\2>//s) {
    $tmp .= "$1<F_TEXTS $f_texts_count>";
    $f_texts[$f_texts_count] = $3;
    $f_texts[$f_texts_count] =~ s/\n/<BR>\n/g;
    $f_texts_count++;
  }
  $text = $tmp . $text;

  # Format supported templates.
  $text = replace_template($heading, $text);
##### M.ITO ( DEBUG #####
  # if ($heading =~ /^わたし$/) {
  #   print $text . "\n";
  #   die "DEBUG $heading\n";
  # }
##### M.ITO ) DEBUG #####

  # Remove templates.
  while ($text =~ s/\{{3}[^\{\}]*\}{3}//sg) {}
  while ($text =~ s/\{\{[^\{\}]*\}\}//sg) {}

  if ($fpwwikipedia_conf{'enable_math'} == 0) {
    # Remove gallery and mathR
    $text =~ s/<(gallery|math)>.*?<\/\1>//sg;
  } else {
    # Detect math formula
    $tmp = '';
    while ($text =~ s/^(.*?)<math( [^<>]*?)?>(.*?)<\/math>//s) {
      $tmp2 = $3;
      $tmp2 =~ s/<F_TEXTS ([0-9]+)>//g;
      $tmp .= "$1<_math ".unpack('H*', encode_utf8($tmp2)).'>';
    }
    $text = $tmp . $text;

    # Remove gallery
    $text =~ s/<gallery>.*?<\/gallery>//sg;
  }

  # tables
  if ($text =~ /\{\|/) {
    $text = format_content_table($text);
  }

  # html tables
  if ($text =~ /<table/) {
    $text = format_content_table_html($text);
  }

  # Backup pre-formatted text
  my @p_texts;
  my $p_texts_count = 0;
  if ($text =~ /^ /m) {
    $tmp = '';
    foreach $_ (split(/\n/, $text)) {
      if ($_ =~ /^ /) {
        $tmp .= "<P_TEXTS $p_texts_count>";
        $p_texts[$p_texts_count] = "$_<BR>\n";
        $p_texts_count++;
      } else {
        $tmp .= "$_\n";
      }
    }
    $text = $tmp;
  }

  # Remove TOC
  $text =~ s/__(NO)?TOC__//;

  # Format footnote
  $text =~ s/<ref>(.*?)<\/ref>/ \($1\) /sg;

  #format superscript/subscript.
  $text =~ s/(<\/?)(su[bp]>)/$1_$2/g;

  $text =~ s/<br\s*\/?>/<_BR>/g;

  # Remove xhtml tags
  $text =~ s/<\/?[a-z]+( [^<>]*|\/)?>//gi;

  # Recover generated tags.
  $text =~ s/(<\/?)_/$1/g;

  # Recover pre formatted texts
  $text =~ s/<P_TEXTS ([0-9]+)>/$p_texts[$1]/g;

  # Remove links to other languages.
  $text =~ s/\[\[[a-z-]+:[^\[\]\|]+\]\]//g;

  # Remove links to media data.
  $text =~ s/\n*\[\[(?:media|image|file|category|画像|音声|ファイル|カテゴリ):([^\[\]]|\[\[[^\[\]]+\]\])+\]\]//gi;

  # Format links to articles in other languages.
  # $text =~ s/\[\[:[a-z-]+:([^\[\]\|]+)\]\]/$1/g;
  $text =~ s/\[\[:?[a-z-]+:(?:[^\[\]\|]+\|)?([^\[\]\|]+)\]\]/$1/g;

  # Format subheadings.
  my @heading_symbol = ('', '', '■', '□', '○', '◇', '▽');

  $text =~ s/^(={2,6}) *((=?[^=])+?) *\1 *$/<H>$heading_symbol[length($1)]$2<\/H>/mg;

  # Format pre-formatted text
  $text =~ s/^ /<IND>/mg;

  # Format definitions
  $text =~ s/^;(.+?) :(.*)/<DT>$1<\/DT>\n<DD>$2<\/DD>/mg;
  $text =~ s/^;(.+?\]\]):(.*)/<DT>$1<\/DT>\n<DD>$2<\/DD>/mg;
  $text =~ s/^;(.*)/<DT>$1<\/DT>/mg;

  # Format itemize / indents

  # while ($text =~ s/^([*\#]*)([*\#])((<IND>)*)/$1<IND>$3$2/mg) {}
  $text =~ s/^([*\#:]*\*)([^*\#:])/'<IND>' x length($1) . "・$2"/mge;
  $text =~ s/^([*\#:]*\#)([^*\#:])/'<IND>' x length($1) . "<N>$2"/mge;
  $text =~ s/^([*\#:]+)([^*\#:])/'<IND>' x length($1) . $2/mge;
  $text =~ s/^([*\#:]+:)/'<IND>' x length($1)/mge;

  $text =~ s/^(<IND>.*)$/$1<BR>/mg;
 
  # Format links to other articles
  if ($fpwwikipedia_conf{'enable_reference'}) {
    $text =~ s/\[\[([^\[\]\|\#]+?)(?:\#[^\[\]\|\#]+)?\|(([^\[\]\|]|\[[^\[\]]|\][^\]])+)\]\]/<R $1>$2<\/R>/g;
    $text =~ s/\[\[([^\[\]\|\#]+?)(?:\#[^\[\]\|\#]+)?\]\]/<R $1>$1<\/R>/g;
  } else {
    $text =~ s/\[\[([^\[\]\|\#]+?)(?:\#[^\[\]\|\#]+)?\|(([^\[\]\|]|\[[^\[\]]|\][^\]])+)\]\]/$2/g;
    $text =~ s/\[\[([^\[\]\|\#]+?)(?:\#[^\[\]\|\#]+)?\]\]/$1/g;
  }

   # Format links to self page.
  $text =~ s/\[\[\#[^\[\]\|\#]+\|(([^\[\]\|]|\[[^\[\]]|\][^\]])+)\]\]/$1/g;
  $text =~ s/\[\[\#([^\[\]\|\#]+)\]\]/$1/g;

  # Format emphasis
  $text =~ s/'{2,}//g; 

##### M.ITO ( DEBUG #####
  # if ($heading =~ /^ダイヤモンド$/) {
  #   print $text . "\n";
  #   die "DEBUG $heading\n";
  # }
##### M.ITO ) DEBUG #####

  # Format LFs
  $text =~ s/^(?:<IND>)*(?:\s*<BR>)+$/<BR>/mg;

  $text =~ s/(?:\n{2,})/<BR>\n/g;
  $text =~ s/(?:<BR>\n?)*\n(<(H|DT|IND))/<BR>\n$1/g;
  $text =~ s/(<\/(H|DT)>)\n?(?:<BR>\n?)+/$1\n/g;

  $text =~ s/^(?:<BR>|\s)+//g;
  $text =~ s/(?:<BR>|\s)+$//g;

  $text = decode_entity($text);

  # Recover nowiki texts
  $text =~ s/<F_TEXTS ([0-9]+)>/$f_texts[$1]/g;

  # print "Formatted_Content: $text\n";
##### M.ITO ( DEBUG #####
  # if ($heading =~ /^ダイヤモンド$/) {
  #   print $text . "\n";
  #   die "DEBUG $heading\n";
  # }
##### M.ITO ) DEBUG #####
  return $text;
}

sub register_content_error {
  my ($fpwtext, $heading, $content, $formatted_content) = @_;

  print encode_utf8('$PROGRAM_NAME:  '.$$fpwtext->error_message()."\n");
  print encode_utf8("Heading: $heading\n");
  print encode_utf8("Content: $content\n");
  print encode_utf8("Formatted_content: $formatted_content\n");
  die;
}

sub expand_search_entry {
  my ($key, $text) = @_;
  my @keys = ($key);
  my @tmp = ();
  my @results = ();
  my $heading;

  # Expand search entry by yomigana
  if ($fpwwikipedia_conf{'yomigana'}) {
    my $regexp = "^([\\p{InHiragana}\\p{InKatakana}－ -]+)";
    if ($text =~ /'''[^']+?'''(?:』)?(?:　| )*[（()](?:''')?(?:\[\[)?(.+?)[)）]/) {
      if ($1 =~ /$regexp/) {
        push(@keys, $1);
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key: $1\n");
##### M.ITO ) DEBUG #####
      }
    }
    if ($key =~ /^.*\p{sc=Han}.*$/) {
      my $kana = '[\p{sc=Hiragana}\p{sc=Katakana}ー]+';
      my $kana_comma_hifun = '[\p{sc=Hiragana}\p{sc=Katakana}ー,-]+';
      if ($text =~ /\{\{ja-(?:noun|noun-suru|verb|verb-suru|adv|adv-suru|wagokanji|name|proper noun)(?:\|[a-zA-Z]+=[^\|\{\}]+)*\|(?:\[\[)?($kana)(?:\]\])?(?:\|[a-zA-Z]+=[^\|\{\}]+)*\}\}/) {
        push(@keys, $1);
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 1: $1\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{ja-(?:noun|noun-suru|verb|verb-suru|adv|adv-suru|wagokanji|name|proper noun)(?:\|[a-zA-Z]+=[^\|\{\}]+)*\|(?:\[\[)?($kana)(?:\]\])?\|(?:\[\[)?($kana)(?:\]\])?(?:\|[a-zA-Z]+=[^\|\{\}]+)*\}\}/) {
        push(@keys, ($1, $2));
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 1: $1, $2\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{ja-(?:noun|noun-suru|verb|verb-suru|adv|adv-suru|wagokanji|name|proper noun)(?:\|[a-zA-Z]+=[^\|\{\}]+)*\|(?:\[\[)?($kana)(?:\]\])?\|(?:\[\[)?($kana)(?:\]\])?\|(?:\[\[)?($kana)(?:\]\])?(?:\|[a-zA-Z]+=[^\|\{\}]+)*\}\}/) {
        push(@keys, ($1, $2, $3));
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 1: $1, $2, $3\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{wagokanji of\|([^\|\{\}]+)\}\}/) {
        push(@keys, $1);
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 2: $1\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{jachars?(?:\|\p{sc=Han}+)*\}\}\s*[（(]\s*(?:\[\[)?($kana)(?:\]\])?\s*[)）]/) {
        push(@keys, $1);
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 3: $1\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{jachars?(?:\|\p{sc=Han}+)*\}\}\s*[（(]\s*(?:\[\[)?($kana)(?:\]\])?\s*、\s*(?:\[\[)?($kana)(?:\]\])?\s*[)）]/) {
        push(@keys, ($1, $2));
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 3: $1, $2\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{jachars?(?:\|\p{sc=Han}+)*\}\}\s*[（(]\s*(?:\[\[)?($kana)(?:\]\])?\s*、\s*(?:\[\[)?($kana)(?:\]\])?\s*、\s*(?:\[\[)?($kana)(?:\]\])?\s*[、)）]/) {
        push(@keys, ($1, $2, $3));
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 3: $1, $2, $3\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{ja-pron(?:\|[a-zA-Z]+=[^\|\{\}]+)*\|($kana)(?:\|[a-zA-Z]+=[^\|\{\}]+)*\}\}/) {
        push(@keys, $1);
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 4: $1\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{head(?:\|[^\|\{\}]*)*\|tr=($kana)(?:\|[^\|\{\}]*)*\}\}/) {
        push(@keys, $1);
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 5: $1\n");
##### M.ITO ) DEBUG #####
      } elsif ($text =~ /\{\{head(?:\|[^\|\{\}]*)*(?:\|head=\{\{jachars\}\})?(?:\|[^\|\{\}]*)*\}\}\s*[（(]?\s*(?:\[\[)?($kana)(?:\]\])?\s*[、)）]/) {
        push(@keys, $1);
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 6: $1\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{lang(?:\|[^\|\{\}]*)*'''[^']*'''(?:\|[^\|\{\}]*)*\}\}\s*[（(]\s*(?:\[\[)?($kana)(?:\]\])?\s*[、)）]/) {
        push(@keys, $1);
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 7: $1\n");
##### M.ITO ) DEBUG #####
      }
      if ($text =~ /\{\{ja-kanji\|常用=($kana_comma_hifun)[\|\}]/) {
        push(@keys, split(/,/, $1));
##### M.ITO ( DEBUG #####
        # print encode_utf8("push key 8: $1\n");
##### M.ITO ) DEBUG #####
      }
    }
  }

  # Expand search entry by redirect
  if (length($entry_headings->get($key))) {
    push (@keys, split(/\t/, $entry_headings->get($key))); 
  }

  # Expand search entry from heading
  foreach  $heading (@keys) {
    push (@tmp, $heading);

    if ($heading =~ /^(.+)[ \t]+\(?:.*\)$/) {
      push (@tmp, $1);
    }

    if ($heading =~ /^[^ \t]+:(.+$)/) {
      push (@tmp, $1);
    }
  }
  @keys = @tmp;
  @tmp = ();

  # Decode entity and characte references, and convert encoding
  foreach  $heading (@keys) {
    $heading = internal2euc(replace_use_table(decode_entity($heading)));
    push (@results, $heading);
  }

  return uniq_array(@results);
}

sub replace_use_table {
  my ($text) = @_;
  $text =~ s/$utf2euc_regexp/$utf2euc_table{$1}/g;
  return $text;
}

sub internal2euc {
  my ($text) = @_;
  $text = encode('euc-jp', $text);
  # $text =~ s/\x8F[\xA1-\xFE][\xA1-\xFE]|\x8E[\xE0-\xFE]/?/g;
  $text =~ s/\x8F[\xA1-\xFE][\xA1-\xFE]/?/g;
  # Workaround
  $text =~ s/\x7f/?/g;
  return $text;
}

my %half_gaiji_chars = ();
my %full_gaiji_chars = ();
my %gaiji_used_chars = ();
my %gaiji_not_found_chars = ();

sub read_gaiji_chars {
  my $fh = FileHandle->new();
  if (!-e $half_char_name_file_name) {
    die "$PROGRAM_NAME: Half character name file does not exist: $half_char_name_file_name\n";
  }
  if (!$fh->open($half_char_name_file_name, 'r')) {
    die "$PROGRAM_NAME: Failed to open the half character name file, $ERRNO: $half_char_name_file_name\n";
  }
  while (defined($_ = $fh->getline())) {
    $_ = decode_utf8($_);
    chomp;
    if (/^([^\t]+)\t([^\t]+)$/) {
      $half_gaiji_chars{$1} = $2;
    } else {
      die "$PROGRAM_NAME: Invalid line in the half character name file: $_\n";
    }
  }
  $fh->close();
  if (!-e $full_char_name_file_name) {
    die "$PROGRAM_NAME: Full character name file does not exist: $full_char_name_file_name\n";
  }
  if (!$fh->open($full_char_name_file_name, 'r')) {
    die "$PROGRAM_NAME: Failed to open the full character name file, $ERRNO: $full_char_name_file_name\n";
  }
  while (defined($_ = $fh->getline())) {
    $_ = decode_utf8($_);
    chomp;
    if (/^([^\t]+)\t([^\t]+)$/) {
      $full_gaiji_chars{$1} = $2;
    } else {
      die "$PROGRAM_NAME: Invalid line in the full character name file: $_\n";
    }
  }
  $fh->close();
}

sub add_text_with_gaiji {
  my ($fpwtext, $text) = @_;
  $text = replace_use_table($text);
  my $euc = internal2euc($text);
  my $text_euc = decode('euc-jp', $euc);
  if ($text eq $text_euc) {
    return $$fpwtext->add_text($euc);
  }
  #
  if (length($text) != length($text_euc) ) {
    die("length different.\n$text\n$text_euc\nlength: " . length($text) . " != " . length($text_euc) . "\n");
  }
  my $index = 0;
  my $found = index($text_euc, '?', $index);
  while ($found >= 0) {
    if ($found > $index) {
      my $subtext = substr($text_euc, $index, $found - $index);
      $$fpwtext->add_text(encode('euc-jp', $subtext))
          || die "$PROGRAM_NAME: " . $$fpwtext->error_message() . "\n";
    }
    my $char = substr($text, $found, 1);
    my $code = ord($char);
    if ($char eq '?') {
      $$fpwtext->add_text(encode('euc-jp', '?'))
          || die "$PROGRAM_NAME: " . $$fpwtext->error_message() . "\n";
    } elsif (exists $half_gaiji_chars{$code}) {
      $$fpwtext->add_half_user_character(encode('euc-jp', $code))
          || die "$PROGRAM_NAME: " . $$fpwtext->error_message() . "\n";
      $gaiji_used_chars{$code} = 1;
    } elsif (exists $full_gaiji_chars{$code}) {
      $$fpwtext->add_full_user_character(encode('euc-jp', $code))
          || die "$PROGRAM_NAME: " . $$fpwtext->error_message() . "\n";
      $gaiji_used_chars{$code} = 1;
    } else {
      $$fpwtext->add_text(encode('euc-jp', '?'))
          || die "$PROGRAM_NAME: " . $$fpwtext->error_message() . "\n";
      if (!exists $gaiji_not_found_chars{$code}) {
        $gaiji_not_found_chars{$code} = 1;
      } else {
        $gaiji_not_found_chars{$code} += 1;
      }
    }
    $index = $found + 1;
    $found = index($text_euc, '?', $index);
  }
  if ($index < length($text_euc)) {
    my $subtext = substr($text_euc, $index);
    $$fpwtext->add_text(encode('euc-jp', $subtext))
        || die "$PROGRAM_NAME: " . $$fpwtext->error_message() . "\n";
  }
  return 1;
}

sub make_gaiji_map {
  my $fh = FileHandle->new();
  #
  if (!$fh->open($work_directory . '/gaiji.map', 'w')) {
    die "$PROGRAM_NAME: Failed to open the gaiji map file, $ERRNO: $work_directory/gaiji.map'\n";
  }
  while (my ($key, $value) = each(%half_gaiji_chars)){
    my $line = sprintf("h%s\tu%04X\n", $value, $key);
    $fh->print(encode_utf8($line));
  }
  while (my ($key, $value) = each(%full_gaiji_chars)){
    my $line = sprintf("z%s\tu%04X\n", $value, $key);
    $fh->print(encode_utf8($line));
  }
  $fh->close();
  #
  if (!$fh->open($work_directory . '/gaiji_used.txt', 'w')) {
    die "$PROGRAM_NAME: Failed to open the gaiji used file, $ERRNO: $work_directory/gaiji_used.txt'\n";
  }
  foreach my $key (sort {$a <=> $b} keys %gaiji_used_chars) {
    $fh->print(encode_utf8("$key\n"));
  }
  $fh->close();
  #
  if (!$fh->open($work_directory . '/gaiji_not_used.txt', 'w')) {
    die "$PROGRAM_NAME: Failed to open the gaiji not used file, $ERRNO: $work_directory/gaiji_not_used.txt'\n";
  }
  foreach my $key (sort {$a <=> $b} keys %half_gaiji_chars) {
    if (!exists $gaiji_used_chars{$key}) {
      $fh->print(encode_utf8("$key\t".chr($key)."\n"));
    }
  }
  foreach my $key (sort {$a <=> $b} keys %full_gaiji_chars) {
    if (!exists $gaiji_used_chars{$key}) {
      $fh->print(encode_utf8("$key\t".chr($key)."\n"));
    }
  }
  $fh->close();
  #
  if (!$fh->open($work_directory . '/gaiji_not_found.txt', 'w')) {
    die "$PROGRAM_NAME: Failed to open the gaiji not found file, $ERRNO: $work_directory/gaiji_not_found.txt'\n";
  }
  foreach my $key (sort {$a <=> $b} keys %gaiji_not_found_chars) {
    $fh->print(encode_utf8("$key\t".chr($key)."\t".$gaiji_not_found_chars{$key}."\n"));
  }
  $fh->close();
}
